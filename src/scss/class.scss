@mixin font ($font) { font-size: getUnit($font); }

@mixin padding ($t: null,$r: null,$b: null,$l: null) { 
    padding: padOrMar($t,$r,$b,$l);
}

@mixin margin ($t: null,$r: null,$b: null,$l: null) { 
    margin: padOrMar($t,$r,$b,$l);
}

@mixin height ($h: null, $unit: null) {
    @if $unit {
        height: getUnit($h, $unit);
    } @else {
        height: getUnit($h);
    }
}

@mixin transition ($transition: null) {
    transition: $transition;
}

@mixin transform ($transform: null, $origin: null) {
    transform: $transform;
    transform-origin: $origin;
}

@mixin width ($w: null, $unit: null) {
    @if $unit {
        width: getUnit($w, $unit)
    }
    @else {
        width: getUnit($w);
    }
}

@mixin minHeight ($h: null) {
    min-height: getUnit($h);
}

@mixin boxSize ($content: null) {
    box-sizing: $content
}

@mixin background ($Color: #fff) {
    background-color: $Color;
}

@mixin overflow ($type: hidden) {
    overflow: $type
}

@mixin gridShow ($colGap: 10, $rowGap: 10, $rowHeight: 260, $columns: auto auto auto auto auto, $type: grid) {
    display: $type;
    grid-template-columns: $columns;
    grid-gap: getUnit($colGap);
    grid-row-gap: getUnit($rowGap);
    grid-auto-rows: getUnit($rowHeight);
}

@mixin threeEnv ($deep: 900, $originL: center, $originT: center, $Env: preserve-3d) {
    perspective: getUnit($deep);
    perspective-origin: $originL $originT;
    transform-style: $Env;
}

@mixin textAlign ($align: center) {
    text-align: $align;
}


@mixin border ($type: false, $c: false, $t: false,$r: false,$b: false,$l: false) { 
    @if $type {
        border-style: $type;
    }
    @if $t and $b and $r and $l {
        border-top-width: getUnit($t);
        border-right-width: getUnit($r);
        border-bottom-width: getUnit($b);
        border-left-width: getUnit($l);
    }@else if $t and $b and $r {
        border-top-width: getUnit($t);
        border-right-width: getUnit($r);
        border-bottom-width: getUnit($b);
    }@else if $t and $b {
        border-top-width: getUnit($t);
        border-right-width: getUnit($r);
    }@else {
        border-width: getUnit($t);
    }
    @if $c {
        border-color: $c;
    }
}


@mixin borderRadius ($t: null,$r: null,$b: null,$l: null) { 
    @if $t and $b and $r and $l {
        border-top-left-radius: getUnit($t);
        border-top-right-radius: getUnit($r);
        border-bottom-right-radius: getUnit($b);
        border-bottom-left-radius: getUnit($l);
    }@else if $t and $b and $r {
        border-top-left-radius: getUnit($t);
        border-top-right-radius: getUnit($r);
        border-bottom-right-radius: getUnit($b);
    }@else if $t and $b {
        border-top-left-radius: getUnit($t);
        border-top-right-radius: getUnit($r);
    }@else {
        border-radius: getUnit($t);
    }
}



@mixin position ($type: null, $t: null,$r: null,$b: null,$l: null) { 
    @if $type {
        position: $type;
    }
    @if $t {
        top: getUnit($t);
    }
    @if $r {
        right: getUnit($r);
    }
    @if $b {
        bottom: getUnit($b);
    }
    @if $l {
        left: getUnit($l);
    }
}

@function padOrMar($t: null,$r: null,$b: null,$l: null) {
    @if $t and $r and $b and $l {
        @return (getUnit($t) getUnit($r) getUnit($b) getUnit($l));
    } @else if $t and $r and $b{
        @return (getUnit($t) getUnit($r) getUnit($b));
    } @else if $t and $r{
        @return (getUnit($t) getUnit($r));
    } @else {
        @return (getUnit($t));
    }
}

@function getUnit($n, $unit: px) {
    @if $n == auto {
        @return auto;
    } @else if $unit == "%" {
        @return $n;
    } @else if $n {
        @return $n + $unit;
    }
}


@mixin boxShadow ( $c: #ccc ,$r: 0, $b: 0, $s: 0, $W: 0, $d: null) {
    box-shadow: getUnit($r) getUnit($b) getUnit($s) getUnit($W) $c $d;
}




